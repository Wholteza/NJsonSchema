{% if HasDescription -%}
/** {{ Description }} */
{% endif -%}
{% if ExportTypes %}export {% endif %}interface {{ ClassName }}{{ Inheritance }} {
{% for property in Properties -%}
{%     if property.HasDescription -%}
    /** {{ property.Description }} */
{%     endif -%}
    {% if property.IsReadOnly %}readonly {% endif %}{{ property.InterfaceName }}{% if property.IsOptional %}?{% endif %}: {{ property.Type }}{{ property.TypePostfix }};
{% endfor -%}
{% if HasIndexerProperty -%}

    [key: string]: {{ IndexerPropertyValueType }};
{% endif -%}
}

{% if ExportTypes %}export {% endif %}class {{ ClassName }}ParsingUtils {
    static init(data?: any{% if HandleReferences %}, _mappings?: any{% endif %}) {
        var result = {} as any;
{% if HasInheritance -%}
        super.init(data);
{% endif -%}
{% if HasIndexerProperty or HasProperties -%}
        if (data) {
{%     if HasIndexerProperty -%}
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    result[property] = data[property];
            }
{%     endif -%}
{%     for property in Properties -%}
            {{ property.ConvertToClassCode | tab }}
{%     endfor -%}
        }
{% endif -%}
        return result as {{ ClassName }};
    }

    static fromJS(data: any{% if HandleReferences %}, _mappings?: any{% endif %}): {{ ClassName }} {
        data = typeof data === 'object' ? data : {};
{% if HandleReferences -%}
{%   if HasBaseDiscriminator -%}
{%     for derivedClass in DerivedClasses -%}
        if (data["{{ BaseDiscriminator }}"] === "{{ derivedClass.Discriminator }}")
{%       if derivedClass.IsAbstract -%}
            throw new Error("The abstract class '{{ derivedClass.ClassName }}' cannot be instantiated.");
{%       else -%}
            return createInstance<{{ derivedClass.ClassName }}>(data, _mappings, {{ derivedClass.ClassName }});
{%       endif -%}
{%     endfor -%}
{%   endif -%}
        return createInstance<{{ ClassName }}>(data, _mappings, {{ ClassName }});
{% else -%}
        return {{ ClassName }}ParsingUtils.init(data);
{% endif -%}
    }

    static toJSON(dto: {{ ClassName }}, data?: any) {
        data = typeof data === 'object' ? data : {};
{% if HasIndexerProperty -%}
        for (var property in this) {
            if (dto.hasOwnProperty(property))
                data[property] = dto[property];
        }
{% endif -%}
{% for property in Properties -%}
        {{ property.ConvertToJavaScriptCode | tab }}
{% endfor -%}
        return data;
    }
}